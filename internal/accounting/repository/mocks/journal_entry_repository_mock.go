package mocks

import (
	"context"
	"erp-system/internal/accounting/models"
	"erp-system/internal/accounting/repository"
	"time"

	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"
)

// JournalEntryRepository is an autogenerated mock type for the JournalEntryRepository type
type JournalEntryRepository struct {
	mock.Mock
}

// AddJournalLine provides a mock function with given fields: ctx, journalID, line
func (_m *JournalEntryRepository) AddJournalLine(ctx context.Context, journalID uuid.UUID, line *models.JournalLine) (*models.JournalLine, error) {
	ret := _m.Called(ctx, journalID, line)

	var r0 *models.JournalLine
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.JournalLine) *models.JournalLine); ok {
		r0 = rf(ctx, journalID, line)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JournalLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.JournalLine) error); ok {
		r1 = rf(ctx, journalID, line)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, entry
func (_m *JournalEntryRepository) Create(ctx context.Context, entry *models.JournalEntry) (*models.JournalEntry, error) {
	ret := _m.Called(ctx, entry)

	var r0 *models.JournalEntry
	if rf, ok := ret.Get(0).(func(context.Context, *models.JournalEntry) *models.JournalEntry); ok {
		r0 = rf(ctx, entry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JournalEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.JournalEntry) error); ok {
		r1 = rf(ctx, entry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *JournalEntryRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *JournalEntryRepository) GetByID(ctx context.Context, id uuid.UUID) (*models.JournalEntry, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.JournalEntry
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.JournalEntry); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JournalEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJournalEntriesByAccountID provides a mock function with given fields: ctx, accountID, offset, limit, startDate, endDate
func (_m *JournalEntryRepository) GetJournalEntriesByAccountID(ctx context.Context, accountID uuid.UUID, offset int, limit int, startDate time.Time, endDate time.Time) ([]*models.JournalEntry, int64, error) {
	ret := _m.Called(ctx, accountID, offset, limit, startDate, endDate)

	var r0 []*models.JournalEntry
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int, time.Time, time.Time) []*models.JournalEntry); ok {
		r0 = rf(ctx, accountID, offset, limit, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.JournalEntry)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int, time.Time, time.Time) int64); ok {
		r1 = rf(ctx, accountID, offset, limit, startDate, endDate)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, int, int, time.Time, time.Time) error); ok {
		r2 = rf(ctx, accountID, offset, limit, startDate, endDate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetJournalEntriesForTrialBalance provides a mock function with given fields: ctx, startDate, endDate
func (_m *JournalEntryRepository) GetJournalEntriesForTrialBalance(ctx context.Context, startDate time.Time, endDate time.Time) ([]models.JournalEntry, error) {
	ret := _m.Called(ctx, startDate, endDate)

	var r0 []models.JournalEntry
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []models.JournalEntry); ok {
		r0 = rf(ctx, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.JournalEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJournalLinesByEntryID provides a mock function with given fields: ctx, journalID
func (_m *JournalEntryRepository) GetJournalLinesByEntryID(ctx context.Context, journalID uuid.UUID) ([]models.JournalLine, error) {
	ret := _m.Called(ctx, journalID)

	var r0 []models.JournalLine
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.JournalLine); ok {
		r0 = rf(ctx, journalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.JournalLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, journalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, offset, limit, filters
func (_m *JournalEntryRepository) List(ctx context.Context, offset int, limit int, filters map[string]interface{}) ([]*models.JournalEntry, int64, error) {
	ret := _m.Called(ctx, offset, limit, filters)

	var r0 []*models.JournalEntry
	if rf, ok := ret.Get(0).(func(context.Context, int, int, map[string]interface{}) []*models.JournalEntry); ok {
		r0 = rf(ctx, offset, limit, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.JournalEntry)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, int, int, map[string]interface{}) int64); ok {
		r1 = rf(ctx, offset, limit, filters)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, map[string]interface{}) error); ok {
		r2 = rf(ctx, offset, limit, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveJournalLine provides a mock function with given fields: ctx, lineID
func (_m *JournalEntryRepository) RemoveJournalLine(ctx context.Context, lineID uuid.UUID) error {
	ret := _m.Called(ctx, lineID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, lineID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, entry
func (_m *JournalEntryRepository) Update(ctx context.Context, entry *models.JournalEntry) (*models.JournalEntry, error) {
	ret := _m.Called(ctx, entry)

	var r0 *models.JournalEntry
	if rf, ok := ret.Get(0).(func(context.Context, *models.JournalEntry) *models.JournalEntry); ok {
		r0 = rf(ctx, entry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JournalEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.JournalEntry) error); ok {
		r1 = rf(ctx, entry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJournalEntryStatus provides a mock function with given fields: ctx, id, newStatus
func (_m *JournalEntryRepository) UpdateJournalEntryStatus(ctx context.Context, id uuid.UUID, newStatus models.JournalStatus) error {
	ret := _m.Called(ctx, id, newStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.JournalStatus) error); ok {
		r0 = rf(ctx, id, newStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJournalLine provides a mock function with given fields: ctx, line
func (_m *JournalEntryRepository) UpdateJournalLine(ctx context.Context, line *models.JournalLine) (*models.JournalLine, error) {
	ret := _m.Called(ctx, line)

	var r0 *models.JournalLine
	if rf, ok := ret.Get(0).(func(context.Context, *models.JournalLine) *models.JournalLine); ok {
		r0 = rf(ctx, line)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JournalLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.JournalLine) error); ok {
		r1 = rf(ctx, line)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJournalEntryRepository creates a new instance of JournalEntryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJournalEntryRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *JournalEntryRepository {
	mock := &JournalEntryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

var _ repository.JournalEntryRepository = (*JournalEntryRepository)(nil)
