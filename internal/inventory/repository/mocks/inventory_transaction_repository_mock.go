package mocks

import (
	"context"
	"erp-system/internal/inventory/models"
	"erp-system/internal/inventory/repository"
	"time"

	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"
)

// InventoryTransactionRepository is an autogenerated mock type for the InventoryTransactionRepository type
type InventoryTransactionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, transaction
func (_m *InventoryTransactionRepository) Create(ctx context.Context, transaction *models.InventoryTransaction) (*models.InventoryTransaction, error) {
	ret := _m.Called(ctx, transaction)

	var r0 *models.InventoryTransaction
	if rf, ok := ret.Get(0).(func(context.Context, *models.InventoryTransaction) *models.InventoryTransaction); ok {
		r0 = rf(ctx, transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.InventoryTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.InventoryTransaction) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *InventoryTransactionRepository) GetByID(ctx context.Context, id uuid.UUID) (*models.InventoryTransaction, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.InventoryTransaction
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.InventoryTransaction); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.InventoryTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStockLevel provides a mock function with given fields: ctx, itemID, warehouseID, date
func (_m *InventoryTransactionRepository) GetStockLevel(ctx context.Context, itemID uuid.UUID, warehouseID uuid.UUID, date time.Time) (float64, error) {
	ret := _m.Called(ctx, itemID, warehouseID, date)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, time.Time) float64); ok {
		r0 = rf(ctx, itemID, warehouseID, date)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, itemID, warehouseID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStockLevelsByItem provides a mock function with given fields: ctx, itemID, date
func (_m *InventoryTransactionRepository) GetStockLevelsByItem(ctx context.Context, itemID uuid.UUID, date time.Time) (map[uuid.UUID]float64, error) {
	ret := _m.Called(ctx, itemID, date)

	var r0 map[uuid.UUID]float64
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) map[uuid.UUID]float64); ok {
		r0 = rf(ctx, itemID, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]float64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, itemID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStockLevelsByWarehouse provides a mock function with given fields: ctx, warehouseID, date
func (_m *InventoryTransactionRepository) GetStockLevelsByWarehouse(ctx context.Context, warehouseID uuid.UUID, date time.Time) (map[uuid.UUID]float64, error) {
	ret := _m.Called(ctx, warehouseID, date)

	var r0 map[uuid.UUID]float64
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) map[uuid.UUID]float64); ok {
		r0 = rf(ctx, warehouseID, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]float64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, warehouseID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, offset, limit, filters
func (_m *InventoryTransactionRepository) List(ctx context.Context, offset int, limit int, filters map[string]interface{}) ([]*models.InventoryTransaction, int64, error) {
	ret := _m.Called(ctx, offset, limit, filters)

	var r0 []*models.InventoryTransaction
	if rf, ok := ret.Get(0).(func(context.Context, int, int, map[string]interface{}) []*models.InventoryTransaction); ok {
		r0 = rf(ctx, offset, limit, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.InventoryTransaction)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, int, int, map[string]interface{}) int64); ok {
		r1 = rf(ctx, offset, limit, filters)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, map[string]interface{}) error); ok {
		r2 = rf(ctx, offset, limit, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewInventoryTransactionRepository creates a new instance of InventoryTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInventoryTransactionRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *InventoryTransactionRepository {
	mock := &InventoryTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}


var _ repository.InventoryTransactionRepository = (*InventoryTransactionRepository)(nil)
